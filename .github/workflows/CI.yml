# Copyright 2021 The Khronos Group, Inc.
# SPDX-License-Identifier: Apache-2.0

# Github CI file for vulkan spec and header generation
# See .gitlab-ci.yml for non-Actions comments
# This should be parallelizable, but it's unclear how to only checkout the
# repository once

name: CI

# defaults:
#   run:
#     working-directory: /root/vulkan

# Controls when the action will run.
on:
  # Triggers the workflow on push or manual dispatch
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  checkout:
    runs-on: ubuntu-latest
    container: khronosgroup/docker-images:asciidoctor-spec
    steps:
      # Should place this under $GITHUB_WORKSPACE/vulkan, now
      - uses: actions/checkout@v2
        with:
          path: vulkan
      - name: Curdir
        run: |
          echo checkout.Curdir: in directory
          pwd
          echo GITHUB_WORKSPACE is
          printenv GITHUB_WORKSPACE
          echo Contents of $GITHUB_WORKSPACE are
          ls $GITHUB_WORKSPACE
          cp -rp $GITHUB_WORKSPACE /root/vulkan
          # ln -s $GITHUB_WORKSPACE /root/vulkan
          echo "Copied $GITHUB_WORKSPACE -> /root/vulkan"
          ls /root/vulkan

  build:
    runs-on: ubuntu-latest
    container: khronosgroup/docker-images:asciidoctor-spec
    needs: checkout
    steps:
      #  Unfortunately, asciidoctor-pdf gets pathname-specific errors
      # building under the usual $GITHUB_WORKSPACE (/__w). As a workaround,
      # generate the outputs in /tmp.

      - name: Curdir
        run: |
          echo build.Curdir: in directory ; pwd ; ls
          echo Contents of /root/vulkan are
          ls /root/vulkan

      - name: REUSE license checker
        run: |
          reuse lint

      - name: Build spec targets
        run: |
          ( cd scripts && py.test-3 test*.py )
          mkdir -p gen/out/checks
          scripts/check_spec_links.py --html=gen/out/checks/problems.html > /dev/null || true
          scripts/check_spec_links.py -Werror --ignore_count 0
          ./makeSpec -clean -spec all QUIET= -j${nproc} -Otarget manhtmlpages validusage styleguide registry chunked html
          ./makeSpec -clean -spec core -genpath gencore QUIET= -j${nproc} -Otarget chunked html
          ( cd xml && make validate test install )

#@  # Generate the vulkan C++ header (vulkan.hpp)
#@  hpp-generate:
#@    stage: build
#@    before_script:
#@      - SPEC_DIR="${PWD}"
#@      - cd /tmp
#@      - rm -rf Vulkan-Hpp
#@      - git clone https://github.com/KhronosGroup/Vulkan-Hpp.git
#@      - cd Vulkan-Hpp
#@      - git submodule update --init --recursive -- tinyxml2
#@      - rm -rf Vulkan-Docs
#@      - cp -r "${SPEC_DIR}" Vulkan-Docs
#@      # Copy Vulkan C headers into subdir copy used by Vulkan-Hpp
#@      - cp -p ${SPEC_DIR}/include/vulkan/*.h Vulkan-Docs/include/vulkan/
#@    script:
#@      - cd /tmp/Vulkan-Hpp
#@      - cmake -H. -Bbuild
#@      - make -C build
#@      - cd build
#@      - ./VulkanHppGenerator "${SPEC_DIR}"/xml/vk.xml
#@    after_script:
#@      - mkdir -p Vulkan-Hpp/vulkan/
#@      - cp /tmp/Vulkan-Hpp/vulkan/vulkan.hpp Vulkan-Hpp/vulkan/
#@    artifacts:
#@      paths:
#@        - Vulkan-Hpp/vulkan/
#@      expire_in: 1 week
#@    allow_failure: true
#@
#@  # Compile a simple test program that uses vulkan.h
#@  # The fake platform headers in tests/ allow compiling with all Vulkan
#@  # platforms at once.
#@  h-compile:
#@    stage: test
#@    dependencies:
#@      - spec-generate
#@    before_script:
#@    # Nothing, all prerequisites are in the Docker image
#@    script:
#@      - gcc -c -std=c11 -Igen/include -Itests -Wall -Wextra -Werror tests/htest.c
#@      - clang -c -std=c11 -Igen/include -Itests -Wall -Wextra -Werror tests/htest.c
#@
#@  # Compile a simple test program that uses vulkan.hpp
#@  hpp-compile:
#@    stage: test
#@    dependencies:
#@      - spec-generate
#@      - hpp-generate
#@    before_script:
#@      # Nothing, all prerequisites are in the Docker image
#@    script:
#@      - g++ -c -std=c++11 -Igen/include -IVulkan-Hpp -Wall -Wextra -Werror tests/hpptest.cpp
#@      - clang++ -c -std=c++11 -Igen/include -IVulkan-Hpp -Wall -Wextra -Werror tests/hpptest.cpp
#@    allow_failure: true

      - name: Archive generated files
        uses: actions/upload-artifact@v2
        with:
          name: spec-outputs
          path: |
            gen/out
